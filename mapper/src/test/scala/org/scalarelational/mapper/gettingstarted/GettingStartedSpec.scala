package org.scalarelational.mapper.gettingstarted

import org.scalarelational.column.property._
import org.scalarelational.h2.{H2Datastore, H2Memory}
import org.scalarelational.model.Table
import org.scalarelational.result.QueryResult
import org.scalatest.{Matchers, WordSpec}

/**
 * @author Matt Hicks <matt@outr.com>
 */
class GettingStartedSpec extends WordSpec with Matchers {
  import GettingStartedDatastore._

  var acmeId: Int = _
  var superiorCoffeeId: Int = _
  var theHighGroundId: Int = _

  "H2 examples" should {
    "Create your Database" in {
      session {
        create(suppliers, coffees)
      }
    }
    "Insert some Suppliers" in {
      import suppliers._

      session {
        // Clean and type-safe inserts
        acmeId = insert(name("Acme, Inc."), street("99 Market Street"), city("Groundsville"), state("CA"), zip("95199")).result
        superiorCoffeeId = insert(name("Superior Coffee"), street("1 Party Place"), city("Mendocino"), state("CA"), zip("95460")).result

        // Short-hand when using values in order - we exclude the id since it will be generated by the database
        theHighGroundId = insertInto(suppliers, "The High Ground", "100 Coffee Lane", "Meadows", "CA", "93966").result
      }
    }
    "Validate Supplier IDs" in {
      acmeId should equal(1)
      superiorCoffeeId should equal(2)
      theHighGroundId should equal(3)
    }
    "Batch Insert some Coffees" in {
      import coffees._

      session {
        // Batch insert some coffees
        insert(name("Colombian"), supID(acmeId), price(7.99), sales(0), total(0)).
          and(name("French Roast"), supID(superiorCoffeeId), price(8.99), sales(0), total(0)).
          and(name("Espresso"), supID(theHighGroundId), price(9.99), sales(0), total(0)).
          and(name("Colombian Decaf"), supID(acmeId), price(8.99), sales(0), total(0)).
          and(name("French Roast Decaf"), supID(superiorCoffeeId), price(9.99), sales(0), total(0)).result
      }
    }
    "Query all the Coffees" in {
      import coffees._

      session {
        val results = (select(*) from coffees).result.toVector
        results.length should equal(5)
        check(results(0), "COFFEES(COF_NAME: Colombian, SUP_ID: 1, PRICE: 7.99, SALES: 0, TOTAL: 0, COF_ID: 1)")
        check(results(1), "COFFEES(COF_NAME: French Roast, SUP_ID: 2, PRICE: 8.99, SALES: 0, TOTAL: 0, COF_ID: 2)")
        check(results(2), "COFFEES(COF_NAME: Espresso, SUP_ID: 3, PRICE: 9.99, SALES: 0, TOTAL: 0, COF_ID: 3)")
        check(results(3), "COFFEES(COF_NAME: Colombian Decaf, SUP_ID: 1, PRICE: 8.99, SALES: 0, TOTAL: 0, COF_ID: 4)")
        check(results(4), "COFFEES(COF_NAME: French Roast Decaf, SUP_ID: 2, PRICE: 9.99, SALES: 0, TOTAL: 0, COF_ID: 5)")
      }

      def check(result: QueryResult[_], expected: String) = {
        val s = result.toString
        s should equal(expected)
      }
    }
    "Query all Coffees filtering and joining with Suppliers" in {
      session {
        val query = select(coffees.name, suppliers.name) from coffees innerJoin suppliers on coffees.supID === suppliers.id where coffees.price < 9.0
        val results = query.result.toVector
        results.length should equal(3)
        results(0)() should equal(("Colombian", "Acme, Inc."))
        results(1)() should equal(("French Roast", "Superior Coffee"))
        results(2)() should equal(("Colombian Decaf", "Acme, Inc."))
      }
    }
  }
  "Mapper Examples" should {
    import org.scalarelational.mapper._

    "Persist a new Supplier" in {
      session {
        val starbucks = Supplier("Starbucks", "123 Everywhere Rd.", "Lotsaplaces", "CA", "93966")
        val updated = suppliers.persist(starbucks).result
        updated.id should equal(Some(4))
      }
    }
    "Query a Supplier back" in {
      session {
        import suppliers._

        val query = select(*) from suppliers where name === "Starbucks"
        val starbucks = query.as[Supplier].result.head()
        starbucks should equal(Supplier("Starbucks", "123 Everywhere Rd.", "Lotsaplaces", "CA", "93966", Some(4)))
      }
    }
    "Query a Supplier back as a tuple" in {
      session {
        import suppliers._

        val query = select(name, street, city, state, zip, id) from suppliers where name === "Starbucks"
        val starbucksTuple = query.result.head()
        // Because we explicitly defined the expressions we want back we can extract the results as a type-safe Tuple.
        starbucksTuple should equal(("Starbucks", "123 Everywhere Rd.", "Lotsaplaces", "CA", "93966", 4))
        // We have to modify the id since it is stored in the database as an Int instead of Option[Int]
        val tupleOption = starbucksTuple.copy[String, String, String, String, String, Option[Int]](_6 = Option(starbucksTuple._6))
        // Use our modified Tuple to create an instance of the Supplier
        val starbucks = Supplier.tupled.apply(tupleOption)
        starbucks should equal(Supplier("Starbucks", "123 Everywhere Rd.", "Lotsaplaces", "CA", "93966", Some(4)))
      }
    }
    "Query a Supplier back as a Supplier explicitly" in {
      session {
        import suppliers._

        // Our original query
        val query = select(name, street, city, state, zip, id) from suppliers where name === "Starbucks"
        // We can map this in our Query to the end resulting type without all the mess using Query.map
        val updated = query.map(t => t.copy[String, String, String, String, String, Option[Int]](_6 = Option(t._6))).map(Supplier.tupled)
        val starbucks = updated.result.head()
        starbucks should equal(Supplier("Starbucks", "123 Everywhere Rd.", "Lotsaplaces", "CA", "93966", Some(4)))
      }
    }
    "Query 'French Roast' with 'Superior Coffee' for (Coffee, Supplier)" in {
      session {
        val query = select(coffees.* ::: suppliers.*) from coffees innerJoin suppliers on(coffees.supID === suppliers.id) where(coffees.name === "French Roast")
        val (frenchRoast, superior) = query.as[Coffee, Supplier](coffees, suppliers).result.head()
        frenchRoast should equal(Coffee("French Roast", superior.id.get, 8.99, 0, 0, Some(2)))
        superior should equal(Supplier("Superior Coffee", "1 Party Place", "Mendocino", "CA", "95460", Some(2)))
      }
    }
  }
}

object GettingStartedDatastore extends H2Datastore(mode = H2Memory("getting_started")) {
  object suppliers extends Table("SUPPLIERS") {
    val name = column[String]("SUP_NAME", NotNull, Unique)
    val street = column[String]("STREET")
    val city = column[String]("CITY")
    val state = column[String]("STATE")
    val zip = column[String]("ZIP")
    val id = column[Int]("SUP_ID", PrimaryKey, AutoIncrement)
  }

  object coffees extends Table("COFFEES") {
    val name = column[String]("COF_NAME", NotNull, Unique)
    val supID = column[Int]("SUP_ID", new ForeignKey(suppliers.id), NotNull)
    val price = column[Double]("PRICE")
    val sales = column[Int]("SALES")
    val total = column[Int]("TOTAL")
    val id = column[Int]("COF_ID", PrimaryKey, AutoIncrement)
  }
}

case class Supplier(name: String, street: String, city: String, state: String, zip: String, id: Option[Int] = None)

case class Coffee(name: String, supID: Int, price: Double, sales: Int, total: Int, id: Option[Int] = None)